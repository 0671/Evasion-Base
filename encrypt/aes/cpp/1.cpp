#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <wincrypt.h>
#pragma comment (lib, "advapi32")

int aes_decrypt(char * payload, unsigned int payload_len, char * key, size_t keylen){
	// https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/example-c-program-decrypting-a-file

	HCRYPTPROV hCryptProv = NULL; 
    HCRYPTKEY hKey = NULL; 
    HCRYPTHASH hHash = NULL; 

	// Get the handle to the default provider. 创建一个加密上下文
	if(!CryptAcquireContextW(
        &hCryptProv, 
        NULL, 
        NULL, 
        PROV_RSA_AES, 
        CRYPT_VERIFYCONTEXT)){
		return -1;
	}
	// Create a hash object.  创建一个hash变量
	if(!CryptCreateHash(
            hCryptProv, 
            CALG_SHA_256, 
            0, 
            0, 
            &hHash)){
		return -1;
	}
	// Hash the password. 计算我们的密钥的hash值
	if(!CryptHashData(
            hHash, 
            (BYTE *)key, 
            (DWORD)keylen,
            0)){
		return -1;
	}
	// Derive a session key from the hash object.  将我们密钥的hash值转换为aes算法理解的格式
	if(!CryptDeriveKey(
            hCryptProv, 
            CALG_AES_256, 
            hHash, 
            0, 
            &hKey)){
		return -1;
	}
	// Encrypt data. 解密数据
   if(!CryptDecrypt(
          hKey, 
          0, 
          0, 
          0, 
          payload, 
          &payload_len)){
   	return -1;
   }
	// Release the provider handle. 
	CryptReleaseContext(hCryptProv,0);
	// Release the hash object.
	CryptDestroyHash(hHash);
	// Release the session key. 
	CryptDestroyKey(hKey);

	return 0;
}

int main(void){

	unsigned char key[] = { 0x70, 0xac, 0xd6, 0xc9, 0xcb, 0x7b, 0x69, 0xea, 0xfe, 0x3d, 0xba, 0x44, 0xd1, 0x5, 0xc8, 0x74 };
	unsigned char payload[] = { 0xbd, 0x3e, 0x95, 0x6d, 0xcd, 0xe1, 0x91, 0x3e, 0x7, 0x6e, 0xa5, 0x12, 0xd2, 0x52, 0x5d, 0x21, 0x36, 0xf3, 0xba, 0x77, 0x96, 0xe3, 0xa6, 0xfa, 0x2f, 0xab, 0xd4, 0x47, 0x8e, 0x26, 0xd1, 0x33, 0xad, 0xab, 0x3f, 0x3e, 0x54, 0x9e, 0xd1, 0xde, 0x95, 0x47, 0x85, 0xcd, 0xc8, 0xf5, 0x2e, 0x7b, 0x33, 0xf4, 0xa4, 0xf0, 0x32, 0x1f, 0x9e, 0x5d, 0x22, 0x4f, 0x6f, 0x67, 0xae, 0x4e, 0x7e, 0x11, 0x32, 0xf8, 0x28, 0xa2, 0xf3, 0xd1, 0x25, 0xfd, 0x55, 0xd1, 0x1e, 0x32, 0xbb, 0xf6, 0x91, 0xa3, 0xeb, 0xbb, 0x4b, 0xe7, 0xa, 0x48, 0xf, 0xc2, 0x7e, 0x6c, 0xb1, 0x6f, 0x1d, 0x94, 0xd8, 0xd, 0x7f, 0x6b, 0x78, 0x9f, 0x2b, 0xe0, 0xa8, 0x24, 0x28, 0x3b, 0x7c, 0xf3, 0xf3, 0xa3, 0x87, 0x18, 0x94, 0x8d, 0xf2, 0x44, 0xe5, 0x68, 0x7a, 0xbe, 0xfe, 0xfa, 0x78, 0x84, 0x1d, 0xd1, 0xeb, 0x79, 0xd, 0x17, 0xd8, 0x66, 0x3a, 0xab, 0x16, 0x10, 0x80, 0x78, 0x28, 0xdc, 0x63, 0x38, 0xad, 0x74, 0xd7, 0xd2, 0x68, 0x8, 0x9d, 0xe8, 0x1d, 0xd1, 0x2d, 0xc2, 0xf5, 0x55, 0x8b, 0x49, 0xbb, 0x2, 0xa8, 0x72, 0xd2, 0xf4, 0xb8, 0x57, 0x83, 0xf5, 0xfc, 0x75, 0x7e, 0x9, 0xba, 0xb9, 0xf7, 0xd3, 0x75, 0x3b, 0x29, 0x26, 0xe9, 0x1a, 0xf9, 0x96, 0x39, 0x6f, 0xb4, 0x79, 0x87, 0x2f, 0x3b, 0x1a, 0x7e, 0x7f, 0xc4, 0xa0, 0x91, 0xcf, 0x32, 0x8c, 0x8f, 0xe0, 0xed, 0x6b, 0x58, 0x64, 0x6, 0xd8, 0x1c, 0xd9, 0x75, 0xab, 0x68, 0x8b, 0x39, 0x64, 0x42, 0x47, 0xe0, 0x9c, 0x8, 0xb0, 0xa9, 0x69, 0x88, 0x61, 0x24, 0x4d, 0x83, 0x29, 0x18, 0xbe, 0x4e, 0x3f, 0x16, 0xe2, 0x23, 0xb9, 0xa, 0x6e, 0xeb, 0x89, 0xc2, 0xd, 0x5, 0xca, 0x95, 0x5f, 0x63, 0x47, 0xdf, 0x6d, 0xa3, 0x17, 0x6, 0xb5, 0xb8, 0xae, 0x2e, 0x53, 0x46, 0x6e, 0x2d, 0xea, 0x9, 0xc4, 0x16, 0xa, 0x1d, 0x9f, 0xb5, 0xed, 0x6e, 0x46, 0xeb, 0x20, 0x88, 0xf6, 0x43, 0x92, 0xfc, 0x2, 0x2c, 0xca, 0x79, 0xe9, 0xcf, 0xff };
	unsigned int payload_len = sizeof(payload);

	printf("key={");
	for(int i=0; i< sizeof(key) ;i++){
		printf("0x%02x, ",key[i]);
	}
	printf("}\n-----------\n");
	printf("enc payload={");
	for(int i=0; i< sizeof(payload) ;i++){
		printf("0x%02x, ",payload[i]);
	}
	printf("}\n-----------\n");

	aes_decrypt((char *)payload, payload_len, key, sizeof(key));
	printf("dec payload={");
	for(int i=0; i< sizeof(payload) ;i++){
		printf("0x%02x, ",payload[i]);
	}
	printf("}\n-----------\n");
	return 0;
}